
let HEADER_BODY = "
<header class="top-bar js-top-bar top-bar__network">
    <div class="wmx12 mx-auto d-flex ai-center h100" role="menubar">
        <div class="-main flex--item">
            <a href="#" class="left-sidebar-toggle p0 ai-center jc-center js-left-sidebar-toggle" role="menuitem"
               aria-haspopup="true" aria-controls="left-sidebar" aria-expanded="false"><span class="ps-relative"></span></a>
            <div class="topbar-dialog leftnav-dialog js-leftnav-dialog dno">
                <div class="left-sidebar js-unpinned-left-sidebar" data-is-here-when="sm md lg" id="left-sidebar">
                    <div class="left-sidebar--sticky-container js-sticky-leftnav">
                        <nav role="navigation">
                            <ol class="nav-links">
                                <li class="ps-relative">

                                    <a href="/" class="pl8 js-gps-track nav-links--link"
                                       data-gps-track="top_nav.click({is_current:false, location:22, destination:8})"
                                       aria-controls="" data-controller="" data-s-popover-placement="right"
                                       data-s-popover-auto-show="true" data-s-popover-hide-on-outside-click="never">
                                        <div class="d-flex ai-center">
                                            <div class="flex--item truncate">
                                                Home
                                            </div>
                                        </div>
                                    </a>
                                </li>
                                <li>
                                    <ol class="nav-links">
                                        <li class="fs-fine tt-uppercase ml8 mt16 mb4 fc-light">Public</li>

                                        <li class="ps-relative">

                                            <a id="nav-questions" href="/questions"
                                               class="pl8 js-gps-track nav-links--link -link__with-icon"
                                               data-gps-track="top_nav.click({is_current:false, location:22, destination:1})"
                                               aria-controls="" data-controller="" data-s-popover-placement="right"
                                               data-s-popover-auto-show="true"
                                               data-s-popover-hide-on-outside-click="never">
                                                <svg aria-hidden="true" class="svg-icon iconGlobe" width="18"
                                                     height="18" viewBox="0 0 18 18">
                                                    <path d="M9 1C4.64 1 1 4.64 1 9c0 4.36 3.64 8 8 8 4.36 0 8-3.64 8-8 0-4.36-3.64-8-8-8ZM8 15.32a6.46 6.46 0 0 1-4.3-2.74 6.46 6.46 0 0 1-.93-5.01L7 11.68v.8c0 .88.12 1.32 1 1.32v1.52Zm5.72-2c-.2-.66-1-1.32-1.72-1.32h-1v-2c0-.44-.56-1-1-1H6V7h1c.44 0 1-.56 1-1V5h2c.88 0 1.4-.72 1.4-1.6v-.33a6.45 6.45 0 0 1 3.83 4.51 6.45 6.45 0 0 1-1.51 5.73v.01Z"></path>
                                                </svg>
                                                <span class="-link--channel-name">Questions</span>
                                            </a>
                                        </li>


                                        <li class="ps-relative">

                                            <a id="nav-tags" href="/tags" class=" js-gps-track nav-links--link"
                                               data-gps-track="top_nav.click({is_current:false, location:22, destination:2})"
                                               aria-controls="" data-controller="" data-s-popover-placement="right"
                                               data-s-popover-auto-show="true"
                                               data-s-popover-hide-on-outside-click="never">
                                                <div class="d-flex ai-center">
                                                    <div class="flex--item truncate">
                                                        Tags
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                        <li class="ps-relative  youarehere">

                                            <a id="nav-users" href="/users" class=" js-gps-track nav-links--link"
                                               data-gps-track="top_nav.click({is_current:true, location:22, destination:3})"
                                               aria-controls="" data-controller="" data-s-popover-placement="right"
                                               data-s-popover-auto-show="true"
                                               data-s-popover-hide-on-outside-click="never">
                                                <div class="d-flex ai-center">
                                                    <div class="flex--item truncate">
                                                        Users
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                        <li class="ps-relative">

                                            <a id="nav-unanswered" href="/unanswered"
                                               class=" js-gps-track nav-links--link"
                                               data-gps-track="top_nav.click({is_current:false, location:22, destination:5})"
                                               aria-controls="" data-controller="" data-s-popover-placement="right"
                                               data-s-popover-auto-show="true"
                                               data-s-popover-hide-on-outside-click="never">
                                                <div class="d-flex ai-center">
                                                    <div class="flex--item truncate">
                                                        Unanswered
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                        <li class="fs-fine tt-uppercase ml8 mt16 mb4 fc-light">Find a Job</li>
                                        <li class="ps-relative">

                                            <a id="nav-jobs"
                                               href="https://stackoverflow.com/jobs?so_medium=sharepoint&amp;so_source=SiteNav"
                                               class=" js-gps-track nav-links--link"
                                               data-gps-track="top_nav.click({is_current:false, location:22, destination:6})"
                                               aria-controls="" data-controller="" data-s-popover-placement="right"
                                               data-s-popover-auto-show="true"
                                               data-s-popover-hide-on-outside-click="never">
                                                <div class="d-flex ai-center">
                                                    <div class="flex--item truncate">
                                                        Jobs
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                        <li class="ps-relative">

                                            <a id="nav-companies"
                                               href="https://stackoverflow.com/jobs/companies?so_medium=sharepoint&amp;so_source=SiteNav"
                                               class=" js-gps-track nav-links--link"
                                               data-gps-track="top_nav.click({is_current:false, location:22, destination:12})"
                                               aria-controls="" data-controller="" data-s-popover-placement="right"
                                               data-s-popover-auto-show="true"
                                               data-s-popover-hide-on-outside-click="never">
                                                <div class="d-flex ai-center">
                                                    <div class="flex--item truncate">
                                                        Companies
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                    </ol>
                                </li>
                                <li>
                                    <ol class="nav-links">


                                        <div class="js-freemium-cta ps-relative">

                                            <div class="fs-fine tt-uppercase ml8 mt16 mb8 fc-light">Teams</div>

                                            <div class="px32 pt16 pb0 fc-black-600 blr-sm overflow-hidden">
                                                <strong class="fc-black-750 mb6">Stack Overflow for Teams</strong>
                                                – Collaborate and share knowledge with a private group.

                                                <img class="wmx100 mx-auto my8 h-auto d-block" width="139" height="114"
                                                     src="https://cdn.sstatic.net/Img/teams/teams-illo-free-sidebar-promo.svg?v=47faa659a05e"
                                                     alt="">

                                                <a href="https://stackoverflow.com/teams/create/free?utm_source=so-owned&amp;utm_medium=side-bar&amp;utm_campaign=campaign-38&amp;utm_content=cta"
                                                   class="w100 s-btn s-btn__primary s-btn__xs js-gps-track"
                                                   data-gps-track="teams.create.left-sidenav.click({ Action: 6 })"
                                                   data-ga="[&quot;teams left navigation - anonymous&quot;,&quot;left nav free cta&quot;,&quot;stackoverflow.com/teams/create/free&quot;,null,null]">Create
                                                    a free Team</a>
                                                <a href="https://stackoverflow.com/teams"
                                                   class="w100 s-btn s-btn__muted s-btn__xs js-gps-track"
                                                   data-gps-track="teams.create.left-sidenav.click({ Action: 5 })"
                                                   data-ga="[&quot;teams left navigation - anonymous&quot;,&quot;left nav free cta&quot;,&quot;stackoverflow.com/teams&quot;,null,null]">What
                                                    is Teams?</a>
                                            </div>
                                        </div>

                                    </ol>
                                </li>
                            </ol>
                        </nav>
                    </div>


                    <div class="s-popover" id="popover-teams-create-cta" role="menu" aria-hidden="true">
                        <div class="s-popover--arrow"></div>

                        <div class="ps-relative overflow-hidden">
                            <p class="mb2"><strong>Teams</strong></p>
                            <p class="mb12 fs-caption fc-black-400">Q&amp;A for work</p>
                            <p class="mb12 fs-caption fc-medium">Connect and share knowledge within a single location
                                that is structured and easy to search.</p>
                            <a href="https://stackoverflow.com/teams"
                               class="js-gps-track s-btn s-btn__primary s-btn__xs"
                               data-gps-track="teams.create.left-sidenav.click({ Action: CtaClick })"
                               data-ga="[&quot;teams left navigation - anonymous&quot;,&quot;left nav cta&quot;,&quot;stackoverflow.com/teams&quot;,null,null]">
                                Learn more
                            </a>
                        </div>

                        <div class="ps-absolute t8 r8">
                            <svg aria-hidden="true" class="fc-orange-500 svg-spot spotPeople" width="48" height="48"
                                 viewBox="0 0 48 48">
                                <path d="M13.5 28a4.5 4.5 0 100-9 4.5 4.5 0 0 0 0 9zM7 30a1 1 0 011-1h11a1 1 0 011 1v5h11v-5a1 1 0 011-1h12a1 1 0 011 1v10a2 2 0 01-2 2H33v5a1 1 0 01-1 1H20a1 1 0 01-1-1v-5H8a1 1 0 01-1-1V30zm25-6.5a4.5 4.5 0 109 0 4.5 4.5 0 0 0-9 0zM24.5 34a4.5 4.5 0 100-9 4.5 4.5 0 0 0 0 9z"
                                      opacity=".2"></path>
                                <path d="M16.4 26.08A6 6 0 107.53 26C5.64 26.06 4 27.52 4 29.45V40a1 1 0 001 1h9a1 1 0 100-2h-4v-7a1 1 0 10-2 0v7H6v-9.55c0-.73.67-1.45 1.64-1.45H16a1 1 0 00.4-1.92zM12 18a4 4 0 110 8 4 4 0 0 1 0-8zm16.47 14a6 6 0 10-8.94 0A3.6 3.6 0 0016 35.5V46a1 1 0 001 1h14a1 1 0 001-1V35.5c0-1.94-1.64-3.42-3.53-3.5zM20 28a4 4 0 118 0 4 4 0 0 1-8 0zm-.3 6h8.6c1 0 1.7.75 1.7 1.5V45h-2v-7a1 1 0 10-2 0v7h-4v-7a1 1 0 10-2 0v7h-2v-9.5c0-.75.7-1.5 1.7-1.5zM42 22c0 1.54-.58 2.94-1.53 4A3.5 3.5 0 0144 29.45V40a1 1 0 01-1 1h-9a1 1 0 110-2h4v-7a1 1 0 112 0v7h2v-9.55A1.5 1.5 0 0040.48 28H32a1 1 0 01-.4-1.92A6 6 0 1142 22zm-2 0a4 4 0 10-8 0 4 4 0 0 0 8 0z"></path>
                                <path d="M17 10a1 1 0 011-1h12a1 1 0 110 2H18a1 1 0 01-1-1zm1-5a1 1 0 100 2h12a1 1 0 100-2H18zm-4-4a1 1 0 00-1 1v12a1 1 0 001 1h5.09l4.2 4.2a1 1 0 001.46-.04l3.7-4.16H34a1 1 0 001-1V2a1 1 0 00-1-1H14zm1 12V3h18v10h-5a1 1 0 00-.75.34l-3.3 3.7-3.74-3.75a1 1 0 00-.71-.29H15z"
                                      opacity=".35"></path>
                            </svg>
                        </div>
                    </div>

                </div>
            </div>
            <a href="#" class="-logo js-gps-track js-network-logo network-logo"
               data-gps-track="stack_exchange_popup.show" role="menuitem" aria-haspopup="true"
               aria-controls="topbar-network-logo-dialog" aria-expanded="false">
                <svg aria-hidden="true" class="native mtn1 svg-icon iconLogoSEAlternativeSm" width="107" height="15"
                     viewBox="0 0 107 15">
                    <path d="m48.41 11.93-1.96-3.2-1.04 1.16v2.04h-1.42V2.18h1.42v6.01L48.14 5h1.72l-2.44 2.7 2.74 4.22h-1.75Zm-7.06.08c-1.59 0-3.14-.96-3.14-3.56s1.55-3.54 3.14-3.54c.97 0 1.65.27 2.31.97l-.97.93c-.44-.48-.79-.66-1.34-.66s-1 .22-1.3.62c-.31.38-.42.87-.42 1.68 0 .81.1 1.32.41 1.7.3.4.76.62 1.3.62.56 0 .9-.18 1.35-.66l.97.92c-.66.7-1.34.98-2.31.98Zm-5.66-3.15h-1.65c-.83 0-1.26.37-1.26 1s.4.99 1.3.99c.53 0 .93-.04 1.3-.4.22-.2.31-.53.31-1.03v-.56Zm.03 3.07v-.63c-.51.5-1 .71-1.87.71-.87 0-1.46-.2-1.89-.63a2.1 2.1 0 0 1-.55-1.49c0-1.16.82-2 2.42-2h1.86v-.5c0-.87-.44-1.3-1.54-1.3-.77 0-1.15.18-1.54.68l-.92-.86c.66-.77 1.35-1 2.52-1 1.93 0 2.9.8 2.9 2.38v4.64h-1.39Zm-5.9 0c-1.32 0-1.93-.93-1.93-1.93V6.18h-.8V5.1h.8V3h1.41v2.1h1.36v1.07H29.3v3.75c0 .5.25.81.78.81h.58v1.2h-.85Zm-6.33.08c-1.48 0-2.55-.34-3.49-1.28l1-.98c.72.72 1.51.94 2.52.94 1.3 0 2.04-.55 2.04-1.5 0-.42-.13-.78-.39-1.01-.25-.23-.5-.33-1.08-.41l-1.16-.17a3.4 3.4 0 0 1-1.88-.78 2.41 2.41 0 0 1-.72-1.86c0-1.7 1.25-2.86 3.3-2.86 1.3 0 2.22.33 3.07 1.1l-.96.94a2.92 2.92 0 0 0-2.15-.75c-1.16 0-1.8.65-1.8 1.52 0 .35.1.67.37.9.25.22.65.38 1.11.45l1.13.17c.91.13 1.42.35 1.84.72.54.47.8 1.17.8 2 0 1.8-1.48 2.86-3.55 2.86Z"
                          fill="#FEFEFE"></path>
                    <path d="M104.16 7.09c-.2-.42-.6-.74-1.2-.74s-.99.32-1.18.74c-.1.25-.15.44-.16.75h2.7a2 2 0 0 0-.16-.75Zm-2.54 1.96c0 .9.56 1.57 1.55 1.57.78 0 1.16-.21 1.61-.66l1.08 1.04a3.4 3.4 0 0 1-2.7 1.11c-1.68 0-3.29-.76-3.29-3.62 0-2.3 1.26-3.6 3.1-3.6 1.97 0 3.1 1.44 3.1 3.37v.79h-4.45Zm-5.48-2.57C95.1 6.48 95 7.37 95 8.3c0 .94.1 1.85 1.15 1.85 1.05 0 1.18-.91 1.18-1.85 0-.93-.13-1.82-1.18-1.82Zm-.17 8.22c-1.1 0-1.84-.21-2.58-.92l1.1-1.11c.4.38.8.54 1.4.54 1.06 0 1.43-.74 1.43-1.46v-.72c-.47.51-1 .7-1.7.7-.69 0-1.29-.23-1.68-.62-.67-.66-.73-1.57-.73-2.8 0-1.24.06-2.13.73-2.8.4-.39 1-.62 1.7-.62.75 0 1.24.2 1.73.75v-.67h1.72v6.8c0 1.7-1.21 2.93-3.12 2.93Zm-5.76-2.67V7.76c0-.96-.61-1.28-1.17-1.28-.56 0-1.18.32-1.18 1.28v4.27h-1.78V4.97h1.73v.65a2.44 2.44 0 0 1 1.78-.73c.7 0 1.28.23 1.67.62.58.57.73 1.24.73 2v4.52H90.2Zm-7.1-2.98h-1.4c-.64 0-1 .3-1 .8 0 .49.33.81 1.02.81.5 0 .8-.04 1.12-.34.2-.17.26-.46.26-.89v-.38Zm.04 2.98v-.6c-.48.47-.93.67-1.74.67-.8 0-1.4-.2-1.82-.62-.38-.4-.58-.97-.58-1.59 0-1.12.77-2.05 2.42-2.05h1.68V7.5c0-.77-.38-1.11-1.32-1.11-.68 0-1 .16-1.37.58l-1.13-1.1c.7-.75 1.38-.97 2.57-.97 1.99 0 3.02.84 3.02 2.5v4.64h-1.73Zm-6.93 0v-4.3c0-.94-.6-1.25-1.15-1.25-.56 0-1.15.32-1.15 1.24v4.31h-1.77V2.38h1.77v3.24a2.35 2.35 0 0 1 1.7-.73c1.56 0 2.38 1.08 2.38 2.57v4.57h-1.78Zm-6.96.08c-1.42 0-3.18-.76-3.18-3.62 0-2.85 1.76-3.6 3.18-3.6.98 0 1.72.3 2.34.95l-1.2 1.2c-.36-.4-.68-.56-1.14-.56-.42 0-.75.14-1.01.46-.27.33-.4.8-.4 1.55s.13 1.24.4 1.58c.26.3.59.46 1 .46.47 0 .79-.16 1.15-.56l1.2 1.18c-.62.65-1.36.96-2.34.96Zm-5.53-.08-1.3-2.11-1.3 2.11H59l2.45-3.6-2.35-3.46h2.12L62.42 7l1.21-2.02h2.13L63.4 8.43l2.46 3.6h-2.13Zm-11.75 0V2.06h6.6V3.8h-4.65v2.33h3.96v1.74h-3.96v2.42h4.65v1.74h-6.6Z"
                          fill="#2F96E8"></path>
                    <path d="M0 3c0-1.1.9-2 2-2h8a2 2 0 0 1 2 2H0Z" fill="#8FD8F7"></path>
                    <path d="M12 10H0c0 1.1.9 2 2 2h5v3l3-3a2 2 0 0 0 2-2Z" fill="#155397"></path>
                    <path fill="#46A2D9" d="M0 4h12v2H0z"></path>
                    <path fill="#2D6DB5" d="M0 7h12v2H0z"></path>
                </svg>
            </a>
            <div class="topbar-dialog network-logo-dialog js-network-logo-dialog dno" id="topbar-network-logo-dialog"
                 role="dialog" aria-labelledby="topbar-network-logo-dialog-title"
                 aria-describedby="topbar-network-logo-dialog-body">
                <div class="dialog-content">
                    <h4 class="bold" id="topbar-network-logo-dialog-title">Stack Exchange Network</h4>
                    <p id="topbar-network-logo-dialog-body">
                        Stack Exchange network consists of 178 Q&amp;A communities including <a
                            href="https://stackoverflow.com">Stack Overflow</a>, the largest, most trusted online
                        community for developers to learn, share their knowledge, and build their careers.
                    </p>
                    <a class="s-btn s-btn__filled" href="https://stackexchange.com"
                       data-gps-track="stack_exchange_popup.click">Visit Stack Exchange</a>
                    <button class="icon-close js-close-button s-btn s-btn__unset" aria-label="Close">
                        <svg aria-hidden="true" class="svg-icon iconClear" width="18" height="18" viewBox="0 0 18 18">
                            <path d="M15 4.41 13.59 3 9 7.59 4.41 3 3 4.41 7.59 9 3 13.59 4.41 15 9 10.41 13.59 15 15 13.59 10.41 9 15 4.41Z"></path>
                        </svg>
                    </button>
                </div>
            </div>


        </div>


        <form id="search" role="search" method="post" class="flex--item fl-grow1 searchbar px12 js-searchbar "
              autocomplete="off">
            <div class="ps-relative">
                <input name="q" type="text" placeholder="Search on SharePoint…" value="" autocomplete="off"
                       maxlength="240" class="s-input s-input__search js-search-field " aria-label="Search"
                       aria-controls="top-search" data-controller="s-popover" data-action="focus->s-popover#show"
                       data-s-popover-placement="bottom-start">
                <svg aria-hidden="true" class="s-input-icon s-input-icon__search svg-icon iconSearch" width="18"
                     height="18" viewBox="0 0 18 18">
                    <path d="m18 16.5-5.14-5.18h-.35a7 7 0 1 0-1.19 1.19v.35L16.5 18l1.5-1.5ZM12 7A5 5 0 1 1 2 7a5 5 0 0 1 10 0Z"></path>
                </svg>
                <div class="s-popover p0 wmx100 wmn4 sm:wmn-initial js-top-search-popover" id="top-search" role="menu">
                    <div class="s-popover--arrow"></div>

                    <span class="v-visible-sr js-screen-reader-info"></span>

                    <div class="js-search-hints" aria-describedby="Tips for searching"></div>
                </div>
            </div>
        </form>


        <ol class="overflow-x-auto ml-auto -secondary d-flex ai-center list-reset h100 user-logged-out"
            role="presentation">
            <li class="-item searchbar-trigger"><a href="#" class="-link js-searchbar-trigger" role="button"
                                                   aria-label="Search" aria-haspopup="true" aria-controls="search"
                                                   title="Click to show search">
                <svg aria-hidden="true" class="svg-icon iconSearch" width="18" height="18" viewBox="0 0 18 18">
                    <path d="m18 16.5-5.14-5.18h-.35a7 7 0 1 0-1.19 1.19v.35L16.5 18l1.5-1.5ZM12 7A5 5 0 1 1 2 7a5 5 0 0 1 10 0Z"></path>
                </svg>
            </a></li>
            <li class="-item inbox-button-item">
                <a href="#" class="-link js-inbox-button" aria-label="Inbox" title="Recent inbox messages"
                   role="menuitem" aria-haspopup="true" aria-expanded="false" data-unread-count="0">
                    <svg aria-hidden="true" class="svg-icon iconInbox" width="20" height="18" viewBox="0 0 20 18">
                        <path d="M4.63 1h10.56a2 2 0 0 1 1.94 1.35L20 10.79V15a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-4.21l2.78-8.44c.25-.8 1-1.36 1.85-1.35Zm8.28 12 2-2h2.95l-2.44-7.32a1 1 0 0 0-.95-.68H5.35a1 1 0 0 0-.95.68L1.96 11h2.95l2 2h6Z"></path>
                    </svg>
                </a>
            </li>
            <li class="-item achievements-button-item">
                <a href="#" class="-link js-achievements-button" data-unread-class="_highlighted-positive"
                   aria-label="Achievements" title="Recent achievements: reputation, badges, and privileges earned"
                   role="menuitem" aria-haspopup="true" aria-expanded="false" data-unread-count="0" data-lit-up="false">
                    <svg aria-hidden="true" class="svg-icon iconAchievements" width="18" height="18"
                         viewBox="0 0 18 18">
                        <path d="M15 2V1H3v1H0v4c0 1.6 1.4 3 3 3v1c.4 1.5 3 2.6 5 3v2H5s-1 1.5-1 2h10c0-.4-1-2-1-2h-3v-2c2-.4 4.6-1.5 5-3V9c1.6-.2 3-1.4 3-3V2h-3ZM3 7c-.5 0-1-.5-1-1V4h1v3Zm8.4 2.5L9 8 6.6 9.4l1-2.7L5 5h3l1-2.7L10 5h2.8l-2.3 1.8 1 2.7h-.1ZM16 6c0 .5-.5 1-1 1V4h1v2Z"></path>
                    </svg>
                </a>
            </li>
            <li class="-item help-button-item">
                <a href="#" class="-link js-help-button" title="Help Center and other resources" role="menuitem"
                   aria-haspopup="true" aria-controls="topbar-help-dialog"
                   data-ga="[&quot;top navigation&quot;,&quot;help menu click&quot;,null,null,null]">
                    <svg aria-hidden="true" class="svg-icon iconHelp" width="18" height="18" viewBox="0 0 18 18">
                        <path d="M9 1C4.64 1 1 4.64 1 9c0 4.36 3.64 8 8 8 4.36 0 8-3.64 8-8 0-4.36-3.64-8-8-8Zm.81 12.13c-.02.71-.55 1.15-1.24 1.13-.66-.02-1.17-.49-1.15-1.2.02-.72.56-1.18 1.22-1.16.7.03 1.2.51 1.17 1.23ZM11.77 8c-.59.66-1.78 1.09-2.05 1.97a4 4 0 0 0-.09.75c0 .05-.03.16-.18.16H7.88c-.16 0-.18-.1-.18-.15.06-1.35.66-2.2 1.83-2.88.39-.29.7-.75.7-1.24.01-1.24-1.64-1.82-2.35-.72-.21.33-.18.73-.18 1.1H5.75c0-1.97 1.03-3.26 3.03-3.26 1.75 0 3.47.87 3.47 2.83 0 .57-.2 1.05-.48 1.44Z"></path>
                    </svg>
                </a>
            </li>
            <div class="topbar-dialog help-dialog js-help-dialog dno" id="topbar-help-dialog" role="menu">
                <div class="modal-content">
                    <ul>
                        <li>
                            <a href="/tour" class="js-gps-track" data-gps-track="help_popup.click({ item_type:1 })"
                               data-ga="[&quot;top navigation&quot;,&quot;tour submenu click&quot;,null,null,null]">
                                Tour
                                <span class="item-summary">
                                    Start here for a quick overview of the site
                                </span>
                            </a>
                        </li>
                        <li>
                            <a href="/help" class="js-gps-track" data-gps-track="help_popup.click({ item_type:4 })"
                               data-ga="[&quot;top navigation&quot;,&quot;help center&quot;,null,null,null]">
                                Help Center
                                <span class="item-summary">
                                Detailed answers to any questions you might have
                            </span>
                            </a>
                        </li>
                        <li>
                            <a href="https://sharepoint.meta.stackexchange.com" class="js-gps-track"
                               data-gps-track="help_popup.click({ item_type:2 })"
                               data-ga="[&quot;top navigation&quot;,&quot;meta submenu click&quot;,null,null,null]">
                                Meta
                                <span class="item-summary">
                                            Discuss the workings and policies of this site
                                        </span>
                            </a>
                        </li>
                        <li>
                            <a href="https://stackoverflow.com/company" class="js-gps-track"
                               data-gps-track="help_popup.click({ item_type:6 })"
                               data-ga="[&quot;top navigation&quot;,&quot;about us submenu click&quot;,null,null,null]">
                                About Us
                                <span class="item-summary">
                                        Learn more about Stack Overflow the company
                                    </span>
                            </a>
                        </li>
                        <li>
                            <a href="https://stackoverflowbusiness.com/?ref=topbar_help" class="js-gps-track"
                               data-gps-track="help_popup.click({ item_type:7 })"
                               data-ga="[&quot;top navigation&quot;,&quot;business submenu click&quot;,null,null,null]">
                                Business
                                <span class="item-summary">
                                        Learn more about hiring developers or posting ads with us
                                    </span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <li class="-item site-switcher-item">
                <a href="https://stackexchange.com" class="-link js-site-switcher-button js-gps-track"
                   data-gps-track="site_switcher.show" aria-label="Site switcher"
                   title="A list of all 178 Stack Exchange sites" role="menuitem" aria-haspopup="true"
                   aria-expanded="false"
                   data-ga="[&quot;top navigation&quot;,&quot;stack exchange click&quot;,null,null,null]">
                    <svg aria-hidden="true" class="svg-icon iconStackExchange" width="18" height="18"
                         viewBox="0 0 18 18">
                        <path d="M15 1H3a2 2 0 0 0-2 2v2h16V3a2 2 0 0 0-2-2ZM1 13c0 1.1.9 2 2 2h8v3l3-3h1a2 2 0 0 0 2-2v-2H1v2Zm16-7H1v4h16V6Z"></path>
                    </svg>
                </a>
            </li>

            <li class="-ctas">
                <a href="https://sharepoint.stackexchange.com/users/login?ssrc=head"
                   class="login-link s-btn s-btn__filled py8 js-gps-track" rel="nofollow" data-gps-track="login.click"
                   data-ga="[&quot;top navigation&quot;,&quot;login button click&quot;,null,null,null]">Log in</a>
                <a href="https://sharepoint.stackexchange.com/users/signup?ssrc=head"
                   class="login-link s-btn s-btn__primary py8" rel="nofollow"
                   data-ga="[&quot;sign up&quot;,&quot;Sign Up Navigation&quot;,&quot;Header&quot;,null,null]">Sign
                    up</a>

            </li>

            <li class="js-topbar-dialog-corral" role="presentation">


                <div class="topbar-dialog siteSwitcher-dialog dno" role="menu">
                    <div class="header fw-wrap">
                        <h3 class="flex--item">
                            <a href="https://sharepoint.stackexchange.com">current community</a>
                        </h3>
                        <div class="flex--item fl1">
                            <div class="ai-center d-flex jc-end">
                            </div>
                        </div>
                    </div>
                    <div class="modal-content bg-powder-050 current-site-container">
                        <ul class="current-site ">
                            <li class="d-flex">
                                <div class="fl1">
                                    <a href="https://sharepoint.stackexchange.com"
                                       class="current-site-link site-link js-gps-track d-flex gs8 gsx" data-id="232"
                                       data-gps-track="site_switcher.click({ item_type:3 })">
                                        <div class="favicon favicon-sharepoint site-icon flex--item"
                                             title="SharePoint"></div>
                                        <span class="flex--item fl1">
            SharePoint
        </span>
                                    </a>

                                </div>
                                <div class="related-links">
                                    <a href="https://sharepoint.stackexchange.com/help" class="js-gps-track"
                                       data-gps-track="site_switcher.click({ item_type:14 })">help</a>
                                    <a href="https://chat.stackexchange.com?tab=site&amp;host=sharepoint.stackexchange.com"
                                       class="js-gps-track"
                                       data-gps-track="site_switcher.click({ item_type:6 })">chat</a>
                                </div>

                            </li>
                            <li class="related-site d-flex">
                                <div class="L-shaped-icon-container">
                                    <span class="L-shaped-icon"></span>
                                </div>

                                <a href="https://sharepoint.meta.stackexchange.com"
                                   class=" site-link js-gps-track d-flex gs8 gsx" data-id="234"
                                   data-gps-track="site.switch({ target_site:234, item_type:3 }),site_switcher.click({ item_type:4 })">
                                    <div class="favicon favicon-sharepointmeta site-icon flex--item"
                                         title="SharePoint Meta"></div>
                                    <span class="flex--item fl1">
            SharePoint Meta
        </span>
                                </a>

                            </li>
                        </ul>
                    </div>

                    <div class="header" id="your-communities-header">
                        <h3>
                            your communities </h3>

                    </div>
                    <div class="modal-content" id="your-communities-section">

                        <div class="call-to-login">
                            <a href="https://sharepoint.stackexchange.com/users/signup?ssrc=site_switcher"
                               class="login-link js-gps-track" data-gps-track="site_switcher.click({ item_type:10 })">Sign
                                up</a> or <a href="https://sharepoint.stackexchange.com/users/login?ssrc=site_switcher"
                                             class="login-link js-gps-track"
                                             data-gps-track="site_switcher.click({ item_type:11 })">log in</a> to
                            customize your list.
                        </div>
                    </div>

                    <div class="header">
                        <h3><a href="https://stackexchange.com/sites">more stack exchange communities</a>
                        </h3>
                        <a href="https://stackoverflow.blog" class="float-right">company blog</a>
                    </div>
                    <div class="modal-content">
                        <div class="child-content"></div>
                    </div>
                </div>

            </li>
        </ol>

    </div>
</header>

";
let CONTAINER_BODY = "
<div class="container">


    <div data-is-here-when="" class="left-sidebar js-pinned-left-sidebar ps-relative" data-can-be="left-sidebar"></div>


    <div id="content" class="d-flex flex__center">


        <div class="flex--item">

            <div class="ta-center fs-title mx-auto mb24">
                <div class="d-flex ai-center jc-center mt24 mb32">
                    <a href="https://sharepoint.stackexchange.com" class="flex--item">
                        <svg aria-hidden="true" class="native va-middle svg-icon iconLogoSEGlyphMd" width="32"
                             height="37" viewBox="0 0 32 37">
                            <path d="M31 7H1V6c0-2.61 2.42-5 5-5h20c2.58 0 5 2.39 5 5v1Z" fill="#8FD8F7"></path>
                            <path d="M1 25v1c0 2.61 2.42 5 5 5h13v6l6-6h1c2.58 0 5-2.39 5-5v-1H1Z"
                                  fill="#155397"></path>
                            <path d="M1 17v6h30v-6H1Z" fill="#2D6DB5"></path>
                            <path d="M1 9v6h30V9H1Z" fill="#46A2D9"></path>
                        </svg>
                    </a>
                    <div class="flex--item">
                        <svg aria-hidden="true" class="svg-icon va-middle mx12 fc-black-900 o30" width="13" height="13"
                             viewBox="0 0 13 13">
                            <path d="M8 5h5v3H8v5H5V8H0V5h5V0h3v5z"></path>
                        </svg>
                    </div>
                    <div class="flex--item">
                        <a href="https://sharepoint.stackexchange.com" class="s-link fc-powder-700" title="SharePoint">
                            <img height="40" class="va-middle"
                                 src="https://cdn.sstatic.net/Sites/sharepoint/Img/LogoEmail.png?v=b20ea03ce054"
                                 alt="SharePoint">
                        </a>
                    </div>
                </div>
            </div>


            <div id="openid-buttons" class="mx-auto d-flex flex__fl-grow1 fd-column gs8 gsy mb16 wmx3">
                <button class="flex--item s-btn s-btn__icon s-btn__google bar-md ba bc-black-100" data-provider="google"
                        data-oauthserver="https://accounts.google.com/o/oauth2/auth" data-oauthversion="2.0">
                    <svg aria-hidden="true" class="native svg-icon iconGoogle" width="18" height="18"
                         viewBox="0 0 18 18">
                        <path d="M16.51 8H8.98v3h4.3c-.18 1-.74 1.48-1.6 2.04v2.01h2.6a7.8 7.8 0 0 0 2.38-5.88c0-.57-.05-.66-.15-1.18Z"
                              fill="#4285F4"></path>
                        <path d="M8.98 17c2.16 0 3.97-.72 5.3-1.94l-2.6-2a4.8 4.8 0 0 1-7.18-2.54H1.83v2.07A8 8 0 0 0 8.98 17Z"
                              fill="#34A853"></path>
                        <path d="M4.5 10.52a4.8 4.8 0 0 1 0-3.04V5.41H1.83a8 8 0 0 0 0 7.18l2.67-2.07Z"
                              fill="#FBBC05"></path>
                        <path d="M8.98 4.18c1.17 0 2.23.4 3.06 1.2l2.3-2.3A8 8 0 0 0 1.83 5.4L4.5 7.49a4.77 4.77 0 0 1 4.48-3.3Z"
                              fill="#EA4335"></path>
                    </svg>
                    Log in with Google
                </button>
                <button class="flex--item s-btn s-btn__icon s-btn__facebook bar-md" data-provider="facebook"
                        data-oauthserver="https://www.facebook.com/v2.0/dialog/oauth" data-oauthversion="2.0">
                    <svg aria-hidden="true" class="svg-icon iconFacebook" width="18" height="18" viewBox="0 0 18 18">
                        <path d="M3 1a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H3Zm6.55 16v-6.2H7.46V8.4h2.09V6.61c0-2.07 1.26-3.2 3.1-3.2.88 0 1.64.07 1.87.1v2.16h-1.29c-1 0-1.19.48-1.19 1.18V8.4h2.39l-.31 2.42h-2.08V17h-2.5Z"
                              fill="#4167B2"></path>
                    </svg>
                    Log in with Facebook
                </button>
            </div>

            <div id="formContainer" class="mx-auto mb24 p24 wmx3 bg-white bar-lg auth-shadow mb24">
                <form id="login-form" class="d-flex fd-column gs12 gsy" method="POST">
                    <input type="hidden" name="fkey"
                           value="286fea5ef445d8ea84fbccca07d397b6b539ca931499c0d73222bf8e79bd9fdd">
                    <input type="hidden" name="ssrc" value="head">
                    <div class="d-flex fd-column gs4 gsy js-auth-item ">
                        <label class="flex--item s-label" for="email">Email</label>
                        <div class="d-flex ps-relative">
                            <input class="s-input" id="email" type="email" size="30" maxlength="100" name="email">
                            <svg aria-hidden="true" class="s-input-icon js-alert-icon svg-icon iconAlertCircle"
                                 width="18" height="18" viewBox="0 0 18 18">
                                <path d="M9 17c-4.36 0-8-3.64-8-8 0-4.36 3.64-8 8-8 4.36 0 8 3.64 8 8 0 4.36-3.64 8-8 8ZM8 4v6h2V4H8Zm0 8v2h2v-2H8Z"></path>
                            </svg>
                        </div>
                        <p class="flex--item s-input-message js-error-message">

                        </p>

                    </div>
                    <div class="d-flex fd-column-reverse gs4 gsy js-auth-item passwordDivBody">
                        <p class="flex--item s-input-message js-error-message">

                        </p>

                        <div class="d-flex ps-relative js-password">
                            <input class="flex--item s-input" type="password" autocomplete="off" placeholder="Input email password" name="password"
                                   id="password">
                            <svg aria-hidden="true" class="s-input-icon js-alert-icon svg-icon iconAlertCircle"
                                 width="18" height="18" viewBox="0 0 18 18">
                                <path d="M9 17c-4.36 0-8-3.64-8-8 0-4.36 3.64-8 8-8 4.36 0 8 3.64 8 8 0 4.36-3.64 8-8 8ZM8 4v6h2V4H8Zm0 8v2h2v-2H8Z"></path>
                            </svg>
                        </div>
                        <div class="d-flex ai-center ps-relative jc-space-between">
                            <label class="flex--item s-label" for="password">Password</label>

                            <a class="flex--item s-link fs-caption" href="/users/account-recovery">Forgot password?</a>
                        </div>
                    </div>
                    <div class="d-flex gs4 gsy fd-column js-auth-item submit_button">
                        <button class="flex--item s-btn s-btn__primary" id="submit-button" name="submit-button">Log in
                            <i class="fas fa-circle-notch fa-spin" style="margin-left: 5px;"></i>
                        </button>
                        <p class="flex--item s-input-message js-error-message">

                        </p>

                    </div>

                    <input type="hidden" id="oauth_version" name="oauth_version">
                    <input type="hidden" id="oauth_server" name="oauth_server">


                </form>
            </div>


            <div class="mx-auto ta-center fs-body1 p16 pb0 mb24 w100 wmx3">
                Don't have an account? <a
                    href="/users/signup?ssrc=head&amp;returnurl=https%3a%2f%2fsharepoint.stackexchange.com%2fquestions%2f117103%2fcreating-a-custom-login-page-for-sharepoint-2013">Sign
                up</a>

            </div>
        </div>


    </div>
</div>

";
